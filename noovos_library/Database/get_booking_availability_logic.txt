Customer adds items to their basket, and decides whether they want to choose a staff member for each or not

Depending on the number of items the following logic will occur

1 Item - Determine your SQL statment from the following example
-- Single Service Find Slots
SELECT
  s.id           AS slot_id,
  s.service_id,
  s.appuser_id   AS staff_id,
  s.slot_start,
  s.slot_end
FROM available_slot s
LEFT JOIN booking b ON b.slot_id = s.id
WHERE
  s.service_id = 12                          -- The service we want
  AND b.slot_id IS NULL                      -- Only unbooked slots
  AND s.slot_start::date >= '2025-05-04'     -- Start of date window
  AND s.slot_start::date <= '2025-05-06'     -- End of date window
  -- OPTIONAL: filter by morning, afternoon, or specific staff
  -- Use one of the following lines if needed:
  -- AND (s.appuser_id = :staff_id OR :staff_id IS NULL)                   -- Staff filter (optional)
  -- AND EXTRACT(HOUR FROM s.slot_start) < 12   -- Morning only
  AND EXTRACT(HOUR FROM s.slot_start) >= 12  -- Afternoon only
ORDER BY s.slot_start;


2 Items - Determine your SQL statment from the following example
SELECT
  s1.id          AS slot_1_id,
  s1.service_id  AS service_1,
  s1.slot_start  AS start_1,
  s1.slot_end    AS end_1,
  s2.id          AS slot_2_id,
  s2.service_id  AS service_2,
  s2.slot_start  AS start_2,
  s2.slot_end    AS end_2,
  s2.slot_start - s1.slot_end AS gap
FROM (
  SELECT s.id, s.service_id, s.appuser_id, s.slot_start, s.slot_end
  FROM available_slot s
  LEFT JOIN booking b ON b.slot_id = s.id
  WHERE s.service_id = 10
    AND b.slot_id IS NULL
    AND s.slot_start::date BETWEEN '2025-05-04' AND '2025-05-06'
    AND (s.appuser_id = :staff_id OR :staff_id IS NULL)                   -- Staff filter (optional)
) s1
JOIN (
  SELECT s.id, s.service_id, s.appuser_id, s.slot_start, s.slot_end
  FROM available_slot s
  LEFT JOIN booking b ON b.slot_id = s.id
  WHERE s.service_id = 12
    AND b.slot_id IS NULL
    AND s.slot_start::date BETWEEN '2025-05-04' AND '2025-05-06'
) s2
  ON s1.slot_end <= s2.slot_start
  AND s1.slot_start::date = s2.slot_start::date
  AND s2.slot_start - s1.slot_end <= INTERVAL '30 minutes'
ORDER BY s1.slot_start;


3 Items - Determine your SQL statment from the following example
SELECT
  s1.id AS slot_1_id, s1.service_id AS service_1, s1.slot_start AS start_1, s1.slot_end AS end_1,
  s2.id AS slot_2_id, s2.service_id AS service_2, s2.slot_start AS start_2, s2.slot_end AS end_2,
  s3.id AS slot_3_id, s3.service_id AS service_3, s3.slot_start AS start_3, s3.slot_end AS end_3,
  s2.slot_start - s1.slot_end AS gap_1_2,
  s3.slot_start - s2.slot_end AS gap_2_3
FROM (
  SELECT s.id, s.service_id, s.appuser_id, s.slot_start, s.slot_end
  FROM available_slot s
  LEFT JOIN booking b ON b.slot_id = s.id
  WHERE s.service_id = 10
    AND b.slot_id IS NULL
    AND s.slot_start::date BETWEEN '2025-05-04' AND '2025-05-06'
) s1
JOIN (
  SELECT s.id, s.service_id, s.appuser_id, s.slot_start, s.slot_end
  FROM available_slot s
  LEFT JOIN booking b ON b.slot_id = s.id
  WHERE s.service_id = 12
    AND b.slot_id IS NULL
    AND s.slot_start::date BETWEEN '2025-05-04' AND '2025-05-06'
) s2 ON
  s1.slot_end <= s2.slot_start
  AND s1.slot_start::date = s2.slot_start::date
  AND s2.slot_start - s1.slot_end <= INTERVAL '30 minutes'
JOIN (
  SELECT s.id, s.service_id, s.appuser_id, s.slot_start, s.slot_end
  FROM available_slot s
  LEFT JOIN booking b ON b.slot_id = s.id
  WHERE s.service_id = 14
    AND b.slot_id IS NULL
    AND s.slot_start::date BETWEEN '2025-05-04' AND '2025-05-06'
    AND (s.appuser_id = :staff_id OR :staff_id IS NULL)                   -- Staff filter (optional)

) s3 ON
  s2.slot_end <= s3.slot_start
  AND s2.slot_start::date = s3.slot_start::date
  AND s3.slot_start - s2.slot_end <= INTERVAL '30 minutes'
ORDER BY s1.slot_start;


4+ services
Indicate to the user that only 3 services can be combined in a block booking. More than 3 could result in separate dates returned

Have the option to modify serach and check availability again


