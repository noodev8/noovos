test1@test.com
123456

DB Name: noovosdb
IP: 77.68.13.150
Port: 5432
user: noovos_dev
temp pw: strong_dev_password


== Get Table Schema ==
SELECT column_name, data_type, is_nullable, character_maximum_length
FROM information_schema.columns
WHERE table_name = 'available_slot';

== get Table Names ==
SELECT table_name
FROM information_schema.tables
WHERE table_schema = 'public'
  AND table_type = 'BASE TABLE';

== TABLES ==
app_user
business
search_log
service




-- Legacy (still exist)
service_staff
staff
payment
customer_notes
reviews
notifications
subscription
audit_log
synonyms
available_slot
booking








== Search Function ==
-- Define your test search term
WITH search_input AS (
    SELECT trim('masage') AS search_term
),
insert_log AS (
    INSERT INTO search_log (search_term)
    SELECT search_term FROM search_input
    RETURNING search_term
),
search_query AS (
    SELECT plainto_tsquery('english', search_term) AS ts_query, search_term
    FROM insert_log
)
SELECT 
    service.id AS service_id,  
    service.service_name::TEXT,  
    business.name::TEXT AS business_name,  
    service.description::TEXT AS service_description,  
    service.service_image::TEXT AS service_image,  
    business.profile_picture::TEXT AS business_profile,  
    service.price::NUMERIC AS cost,  
    business.city::TEXT,  
    business.postcode::TEXT,  
    ts_rank(
        to_tsvector('english', service.service_name) || to_tsvector('english', service.description), 
        sq.ts_query
    ) AS rank_text,
    GREATEST(
        similarity(service.service_name, sq.search_term),   
        similarity(service.description, sq.search_term)
    ) AS rank_fuzzy,  
    GREATEST(
        word_similarity(service.service_name, sq.search_term), 
        word_similarity(service.description, sq.search_term)
    ) AS rank_word_similarity  
FROM 
    service
JOIN 
    business ON service.business_id = business.id
CROSS JOIN
    search_query sq
WHERE 
    GREATEST(
        word_similarity(service.service_name, sq.search_term), 
        word_similarity(service.description, sq.search_term)
    ) > 0.20  
    OR to_tsvector('english', service.service_name) @@ sq.ts_query
    OR GREATEST(
        similarity(service.service_name, sq.search_term),   
        similarity(service.description, sq.search_term)
    ) > 0.20
ORDER BY 
    rank_word_similarity DESC, 
    rank_text DESC, 
    rank_fuzzy DESC
LIMIT 10;
